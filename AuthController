@RestController
@RequestMapping(value="/api/auth")
public class AuthController {
	
	private AuthenticationManager authenticationManager;
	
	private JwtTokenProvider jwtTokenProvider;  //Declare JwtTokenProvider
	
	//Constructor Injection: Spring will automatically inject both dependencies
	public AuthController(AuthenticationManager authenticationManager, JwtTokenProvider jwtTokenProvider) {
		this.authenticationManager = authenticationManager;
		this.jwtTokenProvider = jwtTokenProvider; //Initialize JwtTokenProvider
	}
	
	
	//Login API
	@PostMapping(value = "/login")
	public ResponseEntity<String> login(@Valid @RequestBody LoginDTO loginDTO){
		//Authenticate the user using the AuthenticationManager
		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(
						loginDTO.getUsernameOrEmail(),
						loginDTO.getPassword()
				)
				
		);
		
		//If authentication is successful, set the authenticated user in the security context
		SecurityContextHolder.getContext().setAuthentication(authentication);
		
		//Generate JWT token
		String token = jwtTokenProvider.generateToken(authentication);
		
		//Return the JWT token to the client
		//In a real application, you might return a more complex DTO here
		// that includes the token, user details, and possibly expiry.
		return new ResponseEntity<>(token, HttpStatus.OK);
				
	}
}
